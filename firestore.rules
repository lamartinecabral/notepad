rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /docs/{docId} {
      allow read, write: if
        request.auth.uid == 'KP3btlGYJWOCUFUTzOPoQsRKhR93';
      allow create: if
        request.resource.data.keys() == ['text'] &&
        request.resource.data.text is string;
      allow update: if
        // RULE 1 - a doc is allowed to have only the following fields:
        //   text:       string   (required)
        //   protected:  string   (optional)
        //   public:     boolean  (optional)
        // RULE 2 - only one field is allowed to be changed per operation
        // RULE 3 - if protected does not exists, everyone can read/write
        // RULE 4 - if protected == auth.uid, logged user can read/write
        // RULE 5 - if public == true, everyone can read
        !exists(request.path) ||
        affectedKeys().size() == 0 ||
        (
          changedKeys() == ['text'].toSet() &&
          request.resource.data.text is string &&
          (
            !('protected' in resource.data.keys()) ||
            request.auth.uid == resource.data.protected
          )
        ) || (
          addedKeys() == ['protected'].toSet() &&
          request.auth != null &&
          request.auth.uid == request.resource.data.protected &&
          ( !hasOwner(docId) || isOwner(docId) )
        ) || (
          removedKeys() == ['protected'].toSet() &&
          request.auth.uid == resource.data.protected
        ) || (
          affectedKeys() == ['public'].toSet() &&
          request.auth.uid == resource.data.protected
        );
      allow get: if
        !exists(request.path) ||
        !('protected' in resource.data) ||
        request.auth.uid == resource.data.protected ||
        'public' in resource.data;
    }
    
    match /ownerships/{docId} {
      allow create: if
        request.resource.data.keys() == ['owner'] &&
        request.auth != null &&
        request.auth.uid == request.resource.data.owner &&
        request.auth.token.email_verified &&
        exists(path(/docs/$(docId))) &&
        !isProtected(docId);
      allow get: if
      	!hasOwner(docId) || isOwner(docId);
    }
    
    function affectedKeys(){
      return request.resource.data.diff(resource.data).affectedKeys();
    }
    function addedKeys(){
      return request.resource.data.diff(resource.data).addedKeys();
    }
    function removedKeys(){
      return request.resource.data.diff(resource.data).removedKeys();
    }
    function changedKeys(){
      return request.resource.data.diff(resource.data).changedKeys();
    }
    function path(docPath){
    	return /databases/$(database)/documents/$(docPath);
    }
    function isProtected(docId){
    	return 'protected' in get(path(/docs/$(docId))).data;
    }
    function hasOwner(docId){
    	return exists(path(/ownerships/$(docId)));
    }
    function isOwner(docId){
    	return request.auth != null && request.auth.uid == get(path(/ownerships/$(docId))).data.owner;
    }
  }
}